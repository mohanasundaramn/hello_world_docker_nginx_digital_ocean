version: '3.3'

#services describe the containers that will start
services:
  # api is the container name for our Go API
  api:
    # It will look for a dockerfile in the project root and build it
    build: "."
    # Exposes the port 5000 from a container and binds it to a random port
    ports:
      - "5000"
    # If the container goes down, it will restart
    restart: "always"
    # Connects the API to a common api.network bridge
    networks:
      - "api.network"
    # Starts up 5 replicas of the same image
    deploy:
      replicas: 5
  # nginx container
  nginx:
    # specifies the latest nginx image
    image: nginx:latest
    # Connects the conf file of the container to the conf file in our folder
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
    # It will start up the nginx only when all api containers have started
    depends_on:
      - api
    # Connects the port 80 of the nginx container to localhost:80 or localhost
    ports:
      - "80:80"
      - "443:443"
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
    networks:
      - "api.network"
  certbot:
    image: certbot/certbot
    restart: unless-stopped
    volumes:
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
networks:
  api.network: